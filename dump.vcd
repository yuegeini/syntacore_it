$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module  $end
  $scope module $unit $end
   $var wire 32 '! SCR1_MTVEC_BASE_WR_BITS [31:0] $end
   $var wire 32 (! SCR1_TDU_TRIG_NUM [31:0] $end
   $var wire 32 )! SCR1_ARCH_RST_VECTOR [31:0] $end
   $var wire 32 *! SCR1_ARCH_MTVEC_BASE [31:0] $end
   $var wire 32 +! SCR1_TCM_ADDR_MASK [31:0] $end
   $var wire 32 ,! SCR1_TCM_ADDR_PATTERN [31:0] $end
   $var wire 32 -! SCR1_TIMER_ADDR_MASK [31:0] $end
   $var wire 32 .! SCR1_TIMER_ADDR_PATTERN [31:0] $end
   $var wire 32 /! SCR1_SIM_EXIT_ADDR [31:0] $end
   $var wire 32 0! SCR1_SIM_PRINT_ADDR [31:0] $end
   $var wire 32 1! SCR1_SIM_EXT_IRQ_ADDR [31:0] $end
   $var wire 32 2! SCR1_SIM_SOFT_IRQ_ADDR [31:0] $end
   $var wire 32 3! SCR1_IALU_OP_ALL_NUM_E [31:0] $end
   $var wire 32 %! SCR1_IALU_OP_WIDTH_E [31:0] $end
   $var wire 32 4! SCR1_IALU_CMD_ALL_NUM_E [31:0] $end
   $var wire 32 5! SCR1_IALU_CMD_WIDTH_E [31:0] $end
   $var wire 32 3! SCR1_SUM2_OP_ALL_NUM_E [31:0] $end
   $var wire 32 %! SCR1_SUM2_OP_WIDTH_E [31:0] $end
   $var wire 32 6! SCR1_LSU_CMD_ALL_NUM_E [31:0] $end
   $var wire 32 7! SCR1_LSU_CMD_WIDTH_E [31:0] $end
   $var wire 32 3! SCR1_CSR_OP_ALL_NUM_E [31:0] $end
   $var wire 32 %! SCR1_CSR_OP_WIDTH_E [31:0] $end
   $var wire 32 7! SCR1_CSR_CMD_ALL_NUM_E [31:0] $end
   $var wire 32 3! SCR1_CSR_CMD_WIDTH_E [31:0] $end
   $var wire 32 8! SCR1_RD_WB_ALL_NUM_E [31:0] $end
   $var wire 32 9! SCR1_RD_WB_WIDTH_E [31:0] $end
   $var wire 32 5! SCR1_GPR_FIELD_WIDTH [31:0] $end
   $var wire 32 :! SCR1_CSR_ADDR_WIDTH [31:0] $end
   $var wire 32 ;! SCR1_CSR_MTVEC_BASE_ZERO_BITS [31:0] $end
   $var wire 32 '! SCR1_CSR_MTVEC_BASE_VAL_BITS [31:0] $end
   $var wire 26 <! SCR1_CSR_MTVEC_BASE_WR_RST_VAL [31:6] $end
   $var wire 32 =! SCR1_CSR_MTVEC_BASE_RO_BITS [31:0] $end
   $var wire 32 >! SCR1_EXC_CODE_WIDTH_E [31:0] $end
   $var wire 4 ?! SCR1_EXC_CODE_IRQ_M_SOFTWARE [3:0] $end
   $var wire 4 @! SCR1_EXC_CODE_IRQ_M_TIMER [3:0] $end
   $var wire 4 A! SCR1_EXC_CODE_IRQ_M_EXTERNAL [3:0] $end
   $var wire 4 B! SCR1_EXC_CODE_RESET [3:0] $end
  $upscope $end
  $var wire 1 # clk $end
  $var wire 1 $ rst_n $end
  $var wire 1 % exu2ialu_rvm_cmd_vd_i $end
  $var wire 1 & ialu2exu_rvm_res_rdy_o $end
  $var wire 32 ' exu2ialu_main_op1_i [31:0] $end
  $var wire 32 ( exu2ialu_main_op2_i [31:0] $end
  $var wire 5 ) exu2ialu_cmd_i [4:0] $end
  $var wire 32 * ialu2exu_main_res_o [31:0] $end
  $var wire 1 + ialu2exu_cmp_res_o $end
  $var wire 32 , exu2ialu_addr_op1_i [31:0] $end
  $var wire 32 - exu2ialu_addr_op2_i [31:0] $end
  $var wire 32 . ialu2exu_addr_res_o [31:0] $end
  $scope module scr1_pipe_ialu $end
   $var wire 1 / clk $end
   $var wire 1 0 rst_n $end
   $var wire 1 1 exu2ialu_rvm_cmd_vd_i $end
   $var wire 1 2 ialu2exu_rvm_res_rdy_o $end
   $var wire 32 3 exu2ialu_main_op1_i [31:0] $end
   $var wire 32 4 exu2ialu_main_op2_i [31:0] $end
   $var wire 5 5 exu2ialu_cmd_i [4:0] $end
   $var wire 32 6 ialu2exu_main_res_o [31:0] $end
   $var wire 1 7 ialu2exu_cmp_res_o $end
   $var wire 32 8 exu2ialu_addr_op1_i [31:0] $end
   $var wire 32 9 exu2ialu_addr_op2_i [31:0] $end
   $var wire 32 : ialu2exu_addr_res_o [31:0] $end
   $var wire 32 "! SCR1_MUL_WIDTH [31:0] $end
   $var wire 32 #! SCR1_MUL_RES_WIDTH [31:0] $end
   $var wire 32 $! SCR1_MDU_SUM_WIDTH [31:0] $end
   $var wire 32 %! SCR1_DIV_WIDTH [31:0] $end
   $var wire 32 &! SCR1_DIV_CNT_INIT [31:0] $end
   $var wire 33 ; main_sum_res [32:0] $end
   $var wire 4 = main_sum_flags [3:0] $end
   $var wire 1 > main_sum_pos_ovflw $end
   $var wire 1 ? main_sum_neg_ovflw $end
   $var wire 1 @ main_ops_diff_sgn $end
   $var wire 1 A main_ops_non_zero $end
   $var wire 1 B ialu_cmd_shft $end
   $var wire 32 C shft_op1 [31:0] $end
   $var wire 5 D shft_op2 [4:0] $end
   $var wire 2 E shft_cmd [1:0] $end
   $var wire 32 F shft_res [31:0] $end
   $var wire 1 G mdu_cmd_is_iter $end
   $var wire 1 H mdu_iter_req $end
   $var wire 1 I mdu_iter_rdy $end
   $var wire 1 J mdu_corr_req $end
   $var wire 1 K div_corr_req $end
   $var wire 1 L rem_corr_req $end
   $var wire 2 M mdu_fsm_ff [1:0] $end
   $var wire 2 N mdu_fsm_next [1:0] $end
   $var wire 1 O mdu_fsm_idle $end
   $var wire 1 P mdu_fsm_corr $end
   $var wire 2 Q mdu_cmd [1:0] $end
   $var wire 1 R mdu_cmd_mul $end
   $var wire 1 S mdu_cmd_div $end
   $var wire 2 T mul_cmd [1:0] $end
   $var wire 1 U mul_cmd_hi $end
   $var wire 2 V div_cmd [1:0] $end
   $var wire 1 W div_cmd_div $end
   $var wire 1 X div_cmd_rem $end
   $var wire 1 Y mul_op1_is_sgn $end
   $var wire 1 Z mul_op2_is_sgn $end
   $var wire 1 [ mul_op1_sgn $end
   $var wire 1 \ mul_op2_sgn $end
   $var wire 33 ] mul_op1 [32:0] $end
   $var wire 33 _ mul_op2 [32:0] $end
   $var wire 64 a mul_res [63:0] $end
   $var wire 1 c div_ops_are_sgn $end
   $var wire 1 d div_op1_is_neg $end
   $var wire 1 e div_op2_is_neg $end
   $var wire 1 f div_res_rem_c $end
   $var wire 32 g div_res_rem [31:0] $end
   $var wire 32 h div_res_quo [31:0] $end
   $var wire 1 i div_quo_bit $end
   $var wire 1 j div_dvdnd_lo_upd $end
   $var wire 32 k div_dvdnd_lo_ff [31:0] $end
   $var wire 32 l div_dvdnd_lo_next [31:0] $end
   $var wire 1 m mdu_sum_sub $end
   $var wire 33 n mdu_sum_op1 [32:0] $end
   $var wire 33 p mdu_sum_op2 [32:0] $end
   $var wire 33 r mdu_sum_res [32:0] $end
   $var wire 1 t mdu_iter_cnt_en $end
   $var wire 32 u mdu_iter_cnt [31:0] $end
   $var wire 32 v mdu_iter_cnt_next [31:0] $end
   $var wire 1 w mdu_res_upd $end
   $var wire 1 x mdu_res_c_ff $end
   $var wire 1 y mdu_res_c_next $end
   $var wire 32 z mdu_res_hi_ff [31:0] $end
   $var wire 32 { mdu_res_hi_next [31:0] $end
   $var wire 32 | mdu_res_lo_ff [31:0] $end
   $var wire 32 } mdu_res_lo_next [31:0] $end
   $scope module unnamedblk1 $end
    $var wire 1 ~ sgn $end
    $var wire 1 !! inv $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
1&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00100 )
b00000000000000000000000000000000 *
0+
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
0/
00
01
12
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00100 5
b00000000000000000000000000000000 6
07
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b000000000000000000000000000000000 ;
b1000 =
0>
0?
0@
0A
0B
b00000000000000000000000000000000 C
b00000 D
b00 E
b00000000000000000000000000000000 F
0G
0H
0I
0J
0K
0L
b00 M
b00 N
1O
0P
b00 Q
0R
0S
b00 T
0U
b00 V
1W
0X
1Y
1Z
0[
0\
b000000000000000000000000000000000 ]
b000000000000000000000000000000000 _
b0000000000000000000000000000000000000000000000000000000000000000 a
1c
0d
0e
0f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
0i
0j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
0m
b000000000000000000000000000000000 n
b000000000000000000000000000000000 p
b000000000000000000000000000000000 r
0t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
0w
0x
0y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
0~
0!!
b00000000000000000000000000100000 "!
b00000000000000000000000001000000 #!
b00000000000000000000000000100001 $!
b00000000000000000000000000000001 %!
b01000000000000000000000000000000 &!
b00000000000000000000000000011010 '!
b00000000000000000000000000000010 (!
b00000000000000000000001000000000 )!
b00000000000000000000000111000000 *!
b11111111111111110000000000000000 +!
b00000000010010000000000000000000 ,!
b11111111111111111111111111100000 -!
b00000000010010010000000000000000 .!
b00000000000000000000000011111000 /!
b11110000000000000000000000000000 0!
b11110000000000000000000100000000 1!
b11110000000000000000001000000000 2!
b00000000000000000000000000000010 3!
b00000000000000000000000000010111 4!
b00000000000000000000000000000101 5!
b00000000000000000000000000001001 6!
b00000000000000000000000000000100 7!
b00000000000000000000000000000111 8!
b00000000000000000000000000000011 9!
b00000000000000000000000000001100 :!
b00000000000000000000000000000110 ;!
b00000000000000000000000111 <!
b00000000000000000000000000000000 =!
b00000000000000000000000000000100 >!
b0011 ?!
b0111 @!
b1011 A!
b0000 B!
#1000
#11000
#11001
b00000000000000000000000000000001 '
b00000000000000000000000000000001 (
b00000000000000000000000000000010 *
b00000000000000000000000000000001 3
b00000000000000000000000000000001 4
b00000000000000000000000000000010 6
b000000000000000000000000000000010 ;
b0000 =
1A
b00000000000000000000000000000001 C
b00001 D
b00000000000000000000000000000010 F
#12001
#22001
#22002
b01111111111111111111111111111111 '
b10000000000000000000000000000000 *
b01111111111111111111111111111111 3
b10000000000000000000000000000000 6
b010000000000000000000000000000000 ;
b0100 =
b01111111111111111111111111111111 C
b11111111111111111111111111111110 F
#23002
#33002
#33003
b00000000000000000000000000000001 '
b00101 )
b00000000000000000000000000000000 *
b00000000000000000000000000000001 3
b00101 5
b00000000000000000000000000000000 6
b000000000000000000000000000000000 ;
b1000 =
b00000000000000000000000000000001 C
b00000000000000000000000000000010 F
#34003
#44003
#44004
b00000000000000000000000000000010 (
b11111111111111111111111111111111 *
b00000000000000000000000000000010 4
b11111111111111111111111111111111 6
b111111111111111111111111111111111 ;
b0101 =
b00010 D
b00000000000000000000000000000100 F
#45004
#55004
#55005
b00110 )
b00000000000000000000000000000001 *
1+
b00110 5
b00000000000000000000000000000001 6
17
#56005
#66005
#66006
b00111 )
b00111 5
#67006
#77006
#77007
b00000000000000000000000000000001 (
b01000 )
b00000000000000000000000000000001 4
b01000 5
b000000000000000000000000000000000 ;
b1000 =
b00001 D
b00000000000000000000000000000010 F
#78007
#88007
#88008
b00000000000000000000000000000010 (
b01001 )
b00000000000000000000000000000010 4
b01001 5
b111111111111111111111111111111111 ;
b0101 =
b00010 D
b00000000000000000000000000000100 F
#89008
#99008
#99009
b00000000000000000000000000000010 '
b00000000000000000000000000000001 (
b01011 )
b00000000000000000000000000000010 3
b00000000000000000000000000000001 4
b01011 5
b000000000000000000000000000000001 ;
b0000 =
b00000000000000000000000000000010 C
b00001 D
#100009
#110009
#110010
b01100 )
b00000000000000000000000000000100 *
0+
b01100 5
b00000000000000000000000000000100 6
07
1B
#111010
#121010
#121011
